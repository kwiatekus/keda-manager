---
apiVersion: serverless.kyma-project.io/v1alpha2
kind: Function
metadata:
    creationTimestamp: null
    labels:
        app.kubernetes.io/name: receiver-fn
    name: receiver-fn
    namespace: redis
spec:
    env:
        - name: REDIS_HOST
          valueFrom:
            secretKeyRef:
                key: REDIS_HOST
                name: redis-config
        - name: REDIS_PORT
          valueFrom:
            secretKeyRef:
                key: REDIS_PORT
                name: redis-config
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
                key: redis-password
                name: my-release-redis
    runtime: nodejs18
    source:
        inline:
            dependencies: |-
                {
                  "name": "receiver-fn",
                  "version": "0.0.1",
                  "dependencies": {
                    "redis": "3.0.2"
                  }
                }
            source: |-
                const { error } = require("console");
                const redis = require("redis");
                const { promisify } = require("util");

                let storage = undefined;
                const errors = {
                  codeRequired: new Error("orderCode is required"),
                  alreadyExists: new Error("object already exists"),
                }

                module.exports = {
                  main: async function (event, _) {
                    const storage = getStorage();

                    if (!event.data || !Object.keys(event.data).length) {
                      return await onList(storage, event);
                    }

                    const { orderCode, consignmentCode, consignmentStatus } = event.data;
                    if (orderCode && consignmentCode && consignmentStatus) {
                      return await onCreate(storage, event);
                    }

                    event.extensions.response.status(500);
                  }
                }

                async function onList(storage, event) {
                  try {
                    return await storage.getAll();
                  } catch(err) {
                    event.extensions.response.status(500);
                    return;
                  }
                }

                async function onCreate(storage, event) {
                  try {
                    await storage.set(event.data);
                  } catch(err) {
                    let status = 500;
                    switch (err) {
                      case errors.codeRequired: {
                        status = 400;
                        break;
                      };
                      case errors.alreadyExists: {
                        status = 409;
                        break;
                      };
                    }
                    event.extensions.response.status(status);
                  }
                }

                class RedisStorage {
                  storage = undefined;
                  asyncGet = void 0;
                  asyncKeys = void 0;
                  asyncSet = void 0;

                  constructor(options) {
                    this.storage = redis.createClient(options);
                    this.asyncGet = promisify(this.storage.get).bind(this.storage);
                    this.asyncKeys = promisify(this.storage.keys).bind(this.storage);
                    this.asyncSet = promisify(this.storage.set).bind(this.storage);
                  }

                  async getAll() {
                    let values = [];

                    const keys = await this.asyncKeys("*");
                    for (const key of keys) {
                      const value = await this.asyncGet(key);
                      values.push(JSON.parse(value));
                    }

                    return values;
                  }

                  async set(order = {}) {
                    if (!order.orderCode) {
                      throw errors.codeRequired;
                    }
                    const value = await this.asyncGet(order.orderCode);
                    if (value) {
                      throw errors.alreadyExists;
                    }
                    await this.asyncSet(order.orderCode, JSON.stringify(order));
                  }
                }


                function readEnv(env = "") {
                  return process.env[env] || undefined;
                }

                function createStorage() {
                  let redisPrefix = readEnv("APP_REDIS_PREFIX");
                  if (!redisPrefix) {
                    redisPrefix = "REDIS_";
                  }
                  const port = readEnv(redisPrefix + "PORT");
                  const host = readEnv(redisPrefix + "HOST");
                  const password = readEnv(redisPrefix + "PASSWORD");
                  console.log("host:"+host)
                  console.log("port:"+port)
                  console.log("pass:"+password)

                  if (host && port && password) {
                    return new RedisStorage({ host, port, password });
                  }
                  throw console.error("Redis not initialised")
                }

                function getStorage() {
                  if (!storage) {
                    storage = createStorage();
                  }
                  return storage;
                }

